---
title : Concentration/Dose Dependant Kinetics
author : Parsshava R Mehta
date : 2nd June 2020
---

Load the necessary libraries

```julia
using Pumas, Plots, DataFrames, StatsPlots
```

## Introduction

In this tutorial you will learn the following concentration-dependant models

* Concentration-dependant Elimination
* Concentration-dependant Metabolite Formation
* Dose-dependant Bioavailability

In all these models you can see the Michaelis-Menten term is mentioned in the **`@vars`** block as a short
hand notation. It is then incorporated into the differential equation in the **`@dynamics`** block

#### Concentration-dependant Elimination

In this model the elimination of the  metabolite is saturated at higher concentrations and is written
using the Michaelis-Menten term

```julia
one_compt_non_linear_eli = @model begin
  @param begin
    tvvc   ∈ RealDomain(lower=0)
    tvvmax ∈ RealDomain(lower=0)
    tvkm   ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η      ~ MvNormal(Ω)
  end

  @pre begin
    Vc     = tvvc * exp(η[1])
    Vmax   = tvvmax
    Km     = tvkm * exp(η[2])
  end

  @vars begin  # Concentration-dependant : Elimination
    VMKM  := Vmax/(Km+Central)
  end

  @dynamics begin
    Central' = - VMKM * Central
  end

  @derived begin
    cp     = @. Central/Vc
    nca   := @nca cp
    auc    = NCA.auc(nca)
  end
end
```

Parameters for the model are as below:

```julia
par1 = ( tvvc   = 50,    # (L)
         tvvmax = 45,    # (mg/hr)
         tvkm   = 100,   # (mg)
         Ω      = Diagonal([0.001, 0.001]))
```

**Simulating a population of four subjects with different doses**

* Subject 1 receives a dose of 25 mg given as an IV-bolus at `time=0`
* Subject 2 receives a dose of 200 mg given as an IV-bolus at `time=0`
* Subject 3 receives a dose of 400 mg given as an IV-bolus at `time=0`
* Subject 4 receives a dose of 600 mg given as an IV-bolus at `time=0`

```julia
ev1  = DosageRegimen(25, time=0, cmt=:Central)
sub1 = Subject(id=1, evs= ev1)
ev2  = DosageRegimen(200, time=0, cmt=:Central)
sub2 = Subject(id=2, evs=ev2)
ev3  = DosageRegimen(400, time=0, cmt=:Central)
sub3 = Subject(id=3, evs=ev3)
ev4  = DosageRegimen(600, time=0, cmt=:Central)
sub4 = Subject(id=4, evs=ev4);
```

Concatenate all the four subjects as a population and use the `simobs` function for simulation

```julia
sub  = [sub1, sub2, sub3, sub4]
obs1 = simobs(one_compt_non_linear_eli, sub, par1, obstimes=0:0.1:30);
```

Convert `obs1` to a dataframe and plot **Concentration vs Time**

```julia
simdf = DataFrame(obs1)
@df simdf plot(:time, :cp, yaxis=:log, group=:id, xlabel="Time (hr)", ylabel="Concentration (mg/L)", title="Concentration vs Time", legendtitle="Subject Id", linewidth=1.5)
```

Use the Dataframes functions to `filter` and `select` the rows and colums as required for plotting

```julia
df1 = filter(x -> x.time ==0 && x.amt>0, simdf)
df2 = select!(df1,:amt,:auc)
```

Plot AUC vs Dose and see the concentration-dependant change in AUC

```julia
@df df2 scatter(:amt, :auc, xlabel="Dose (mg)", ylabel="AUC (mg.h/L)", title="AUC vs Dose", label=false)
@df df2 plot!(:amt, :auc, label=false, linewidth=1.5)
```

#### Concentration-dependant Metabolite Formation

In this model the formation of the metabolite is saturated at higher concentration and follows
a Michaelis-Menten type reaction

```julia
two_compt_non_linear_metform = @model begin
  @param begin
    tvvc    ∈ RealDomain(lower=0)
    tvq     ∈ RealDomain(lower=0)
    tvvp    ∈ RealDomain(lower=0)
    tvvmax  ∈ RealDomain(lower=0)
    tvkm    ∈ RealDomain(lower=0)
    tvkme   ∈ RealDomain(lower=0)
    tvvme   ∈ RealDomain(lower=0)
    Ω       ∈ PDiagDomain(3)
  end

  @random begin
    η       ~ MvNormal(Ω)
  end

  @pre begin
    Vc      = tvvc * (Wt/70) * exp(η[1])
    Q       = tvq * (Wt/70)^0.75 * exp(η[2])
    Vp      = tvvp * (Wt/70)
    Vmax    = tvvmax * (Wt/70)
    Km      = tvkm
    Kme     = tvkme * exp(η[3])
    Vme     = tvvme * (Wt/70)
  end

  @covariates Wt

  @vars begin  # Concentration-dependant : Metabolite formation
    VMKM   := Vmax/(Km+Central)
  end

  @dynamics begin
    Central'    = -(Q/Vc)*Central + (Q/Vp)*Peripheral - VMKM*Central
    Peripheral' = (Q/Vc)*Central - (Q/Vp)*Peripheral
    Metabolite' = VMKM*Central - Kme*Metabolite
  end

  @derived begin
    cp    = @. Central/Vc
    met   = @. Metabolite/Vme
    nca  := @nca cp
    auc   = NCA.auc(nca)
  end
end
```

Parameters for the model are as below:

```julia
par_met = ( tvvc    = 1,        # (L/kg)
            tvq     = 0.2,      # (L/min/kg)
            tvvp    = 3,        # (L/kg)
            tvvmax  = 2,        # (μg/min/kg)
            tvkm    = 60,       # (μg)
            tvkme   = 0.15,     # (min⁻¹)
            tvvme   = 0.3,      # (L/kg)
            Ω       = Diagonal([0.001, 0.001, 0.001]))
```

**Simulating a population of four subjects with different doses**

* Subject 1 receives a dose of 50 μg/kg given as an IV-Bolus at `time=0`
* Subject 2 receives a dose of 300 μg/kg given as an IV-Bolus at `time=0`
* Subject 3 receives a dose of 600 μg/kg given as an IV-Bolus at `time=0`
* Subject 4 receives a dose of 900 μg/kg given as an IV-Bolus at `time=0`

```julia
ev1  = DosageRegimen(50, time=0, cmt=:Central)
sub1 = Subject(id=1, evs=ev1, cvs=(Wt=70,))
ev2  = DosageRegimen(300, time=0, cmt=:Central)
sub2 = Subject(id=2, evs=ev2, cvs=(Wt=70,))
ev3  = DosageRegimen(600, time=0, cmt=:Central)
sub3 = Subject(id=3, evs=ev3, cvs=(Wt=70,))
ev4  = DosageRegimen(900, time=0, cmt=:Central)
sub4 = Subject(id=4, evs=ev4, cvs=(Wt=70,))
sub  = [sub1, sub2, sub3, sub4]
```

Use the `simobs` function to run the simulation

```julia
obs1 = simobs(two_compt_non_linear_metform, sub, par_met, obstimes=0:1:600);
```

Convert `obs1` to a dataframe. Plot **Plasma Concentration vs Time**

```julia
simdf = DataFrame(obs1)
@df simdf plot(:time, :cp, yaxis=:log, group=:id, xlabel="Time (mins)", ylabel="Concentration (ug/L)", title="Plasma Conc vs Time", legendtitle="Subject Id", linewidth=1.5,)
```

Plot **Metabolite Concentration vs Time**

```julia
df1 = filter(x -> x.time >0, simdf)
@df df1 plot(:time, :met, yaxis=:log, group=:id, xlabel="Time (mins)",  ylabel="Concentration (ug/L)", title="Metabolite Conc vs Time", legendtitle="Subject Id", legend=:bottomleft, linewidth=1.5)
```

Use the Dataframes functions to `filter` and `select` the rows and colums as required for plotting

```julia
df2 = filter(x -> x.time ==0 && x.amt>0, simdf)
df3 = select!(df2,:id,:amt,:auc)
```

Plot AUC vs Dose and see the dose-dependant change in AUC

```julia
@df df2 scatter(:amt, :auc, xlabel="Dose (ug/kg)", ylabel="AUC (ug.min/L/kg)", title="AUC vs Dose", label=false)
@df df2 plot!(:amt, :auc, linewidth=1.5, label=false)
```

#### Dose-dependant Bioavailability

In this model the bioavailability of the drug is saturated at higher doses and follows
a Michaelis-Menten type reaction

**Note:**

 1. In this example a term for bioavailability is intoduced in the @pre block. F which is dose-dependant is written in Michaelis-Menten terms and intoduced in the `bioav`.

 2. The same term to calculate bioavailability is introduced in the @vars block to obtain the output for plotting.To introduce a covariate in the @vars block you need to pass them through @pre block. In this current example the covariate `Dose` is assigned a new variable `_Dose` in the @pre block and then introduced into the @vars block.

```julia
one_compt_non_linear_bio = @model begin
  @param begin
    tvcl       ∈ RealDomain(lower=0)
    tvvc       ∈ RealDomain(lower=0)
    tvka       ∈ RealDomain(lower=0)
    tvrelfmax  ∈ RealDomain(lower=0)
    tvrelfd50  ∈ RealDomain(lower=0)
    Ω          ∈ PDiagDomain(2)
  end

  @random begin
    η          ~ MvNormal(Ω)
  end

  @covariates Dose

  @pre begin
    Cl         = tvcl*exp(η[1])
    Vc         = tvvc*exp(η[2])
    Ka         = tvka
    RelFmax    = tvrelfmax
    RelFD50    = tvrelfd50
    RefDose    = 20
    _Dose      = Dose
    F          = 1+((RelFmax*(Dose-RefDose))/(RelFD50+(Dose-RefDose)))
    # RelFmax   = Maximum Bioavailability relative to RefDose
    # When Dose = RefDose = The bioavailability will be 1
    # Consider an other scenario where RelFmax = RelFmin = -0.5 and the doses are 1,2,5,10,20. Use the RelFD50
    bioav      = (Depot = F,)
  end

  @vars begin # Dose-dependant : Bioavailability
    bioava    = 1+((RelFmax*(_Dose-RefDose))/(RelFD50+(_Dose-RefDose)))
  end

  @dynamics begin
    Depot'     = -Ka*Depot
    Central'   = Ka*Depot - (Cl/Vc)*Central
  end

  @derived begin
    cp         = @. Central/Vc
    nca        := @nca cp
    cl         = NCA.cl(nca)
  end
end
```

Parameters for the model are as below:

```julia
par1 = ( tvcl      = 20,     # (L/hr)
         tvvc      = 80,     # (L)
         tvka      = 1.77,   # (h⁻¹)
         tvrelfmax = 0.504,  # Maximum Bioavailability relative to Reference Dose (20mg)
         tvrelfd50 = 80,  # (mg)
         Ω         = Diagonal([0.001,0.001]))
```

**Simulating a population of six subjects with different doses:**

* Subject 1 receives an oral dose of 20 mg at `time=0` (Reference Dose)
* Subject 2 receives an oral dose of 40 mg at `time=0`
* Subject 3 receives an oral dose of 80 mg at `time=0`
* Subject 4 receives an oral dose of 120 mg at `time=0`
* Subject 5 receives an oral dose of 240 mg at `time=0`
* Subject 6 receives an oral dose of 400 mg at `time=0`

```julia
ev1  = DosageRegimen(20, time=0, cmt=:Depot)
sub1 = Subject(id=1, evs=ev1, cvs=(Dose=20,))
ev2  = DosageRegimen(40, time=0, cmt=:Depot)
sub2 = Subject(id=2, evs=ev2, cvs=(Dose=40,))
ev3  = DosageRegimen(80, time=0, cmt=:Depot)
sub3 = Subject(id=3, evs=ev3, cvs=(Dose=80,))
ev4  = DosageRegimen(120, time=0, cmt=:Depot)
sub4 = Subject(id=4, evs=ev4, cvs=(Dose=120,))
ev5  = DosageRegimen(240, time=0, cmt=:Depot)
sub5 = Subject(id=5, evs=ev5, cvs=(Dose=240,))
ev6  = DosageRegimen(400, time=0, cmt=:Depot)
sub6 = Subject(id=6, evs=ev6, cvs=(Dose=400,))
sub  = [sub1, sub2, sub3, sub4, sub5, sub6]
```

Use the `simobs` function to run the simulation

```julia
obs1  = simobs(one_compt_non_linear_bio, sub, par1, obstimes=0:0.1:24)
simdf = DataFrame(obs1)
@df simdf plot(:time, :cp, group=:id, xlabel="Time (hr)",  ylabel="Concentration (mg/L)", title="Concentration vs Time", legendtitle="Subject Id", linewidth=1.5)
```

Use the Dataframes functions to `filter` and `select` the rows and colums as required for plotting

```julia
df1 = filter!(x -> x.time ==0 && x.amt >0, simdf)
df2 = select!(df1,:Dose,:cl, :bioava)
```
Plot Bioavailability vs Dose and see the dose-depededant change in Bioavailability

```julia
@df df2 scatter(:Dose, :bioava, xlabel="Dose (mg)", ylabel="Relative Increase in F ", title="Bioavailability vs Dose",label=false)
@df df2 plot!(:Dose, :bioava,label=false, linewidth=1.5)
```

Plot Clearance vs Dose and see the dose-depededant change in Clearance

```julia
@df df2 scatter(:Dose, :cl, xlabel="Dose (mg)", ylabel="Cl/F (L/hr)", title="Clearance vs Dose",label=false)
@df df2 plot!(:Dose, :cl,label=false, linewidth=1.5)
```
