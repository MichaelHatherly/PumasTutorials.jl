---
title : TMDD model
author : Wansu Park
date:  Apr 14, 2019
---

```julia
using PuMaS, DataFrames, LinearAlgebra, Plots
```

# Introduction

The objectives of this tutorial is to implement a target-mediated drug dispostion
(TMDD) model in PuMaS. TMDD is the phenomenon in which a drug binds with high
affinity to its pharmacological target site (such as a receptor) to such an
extent that this affects its pharmacokinetic characteristics.

 TMDD concepts is is introduced by [Levy (1994)](https://www.ncbi.nlm.nih.gov/pubmed/7924119)
 and one-compartment full TMDD model was proposed by [Mager and Jusko (2001)](https://www.ncbi.nlm.nih.gov/pubmed/11999290).
 Approximated model of full TMDD model such as Quasi-steady-state (QSS) model was proposed by [Gibiansky (2008)](https://www.ncbi.nlm.nih.gov/pubmed/19005743)

 The followings are nice tutorials for the concept of TMDD and example codes are available.
- [Tutorial on TMDD Models in CPTPSP 2015](https://www.ncbi.nlm.nih.gov/pubmed/26225261)
- [TMDD model library by Monolix](http://mlxtran.lixoft.com/libraries/target-mediated-drug-disposition-tmdd-model-library/)
- [Modeling Drugs with TMDD by Leonid Gibianksy](http://www.quantpharm.com/pdf_files/TMDD_Talk_PAGE_2011.pdf)

# Model

## Full Model
First, we want to implement one-compartment IV infusion full TMDD model.
Model structure is as following. (add figure)

In this model, there are 3 compartments and 7 parameters.

- Compartments
    - L : Ligand or Drug
    - R : Receptor or Target
    - P : Complex
- Parameters
    - VC : Central volume (volume)
    - KEL : Elimination rate constant (1/time)
    - KON : Associate rate (1/concentration/time)
    - KOFF : Dissociatation rate (1/time)
    - KSYN : Target synthesis rate (conc/time)
    - KDEG : Target degradation rate (1/time)
    - KINT : Internalization rate (1/time)

The major assumptions of the model are as followings :
- The drug-target binding is a simple one-to-one binding process and occurs only in the centaral compartment
- Recyling of the target does not occur in the elimination process of the drug-target complex
- Target production and degradation rate are constant and do not depend on the drug or target concentration

In TMDD model, you should consider the followings:
- All equations are in molar form with different molar weights
- Dose and concentration sholud be converted to molar units

### Model file

```julia
tmdd_full = @model begin
    @param begin
        θ ∈ VectorDomain(7, lower=zeros(7), init=ones(7))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end
    @pre begin
        VC   = θ[1] * exp(η[1])
        KEL  = θ[2]
        KON  = θ[3]
        KOFF = θ[4]
        KSYN = θ[5]
        KDEG = θ[6]
        KINT = θ[7]
    end

    @init begin
        R = KSYN/KDEG
    end

    @vars begin
        LCONC = L/VC                         # Free Drug Cocncentration (nM)
    end

    @dynamics begin
    L' = -KEL*L - KON*L*R + KOFF*P*VC         # Free Drug Amount
    R' = KSYN - KDEG*R - KON*L*R/VC + KOFF*P  # Free Receptor Concentration
    P' = KON*L*R/VC - KOFF*P - KINT*P         # Complex Cencentration
    end

    @derived begin
        DV ~ @.Normal(LCONC, sqrt(LCONC^2 * σ_prop))
    end
end;
```
In this model, 7 parameters are defined in `@pre`.
Initial value of receptor compartment (`R`) is defined by `KSYN/KDEG` in `@init`.
`L` is defined as amount and `R` and `P` are defined as concentration.
Ligand concentration (`LCONC`) is defined by `L/VC` in `@vars`.
Ligand concentration considering residual variability is derived in `@derived`.
In this example, proportional error model is applied.

### Setting up parameters

```julia
fixeffs = [
      3,       # VC, Central volume (L)
      0.025,   # KEL, Elimination rate constant (1/day)
      10,      # KON, Associate rate (1/(nmol/L)/day)
      0.1,     # KOFF, Dissociatation rate (1/day)
      1,       # KSYN, Target synthesis rate (nmol/day)
      0.1,     # KDEG, Target degradation rate (1/day)
      0.2      # KINT, Internalization rate (1/day)
      ]

parameter = (θ = fixeffs,
             Ω = PDMat(diagm(0 => [0.0001])),
             σ_prop = 0.01);
```
7 fixed effect parameter values are assigned in `fixeffs`

### Simulation design

```julia
dosemg1 = 10    # mg
dosemg2 = 30    # mg
dosemg3 = 100   # mg
dose1 = dosemg1*1e-3/150000*1e9     # nmol
dose2 = dosemg2*1e-3/150000*1e9     # nmol
dose3 = dosemg3*1e-3/150000*1e9     # nmol
tlast = 96      # day

e1 = DosageRegimen(dose1)
e2 = DosageRegimen(dose2)
e3 = DosageRegimen(dose3)

pop1 = Population(map(i -> Subject(id=i,evs=e1),1:1))
pop2 = Population(map(i -> Subject(id=i,evs=e2),2:2))
pop3 = Population(map(i -> Subject(id=i,evs=e3),3:3))
pop = Population(vcat(pop1,pop2,pop3));
```

We simulated three doses (10, 30, 100 mg) and dose unit are converted into nmol
by considering typical molecular weight of monoclonal antibody as 150,000.
We also simulated until 96 days (`tlast`).

### Simulation

```julia
using Random
Random.seed!(123456)
sim_tmdd_full = simobs(tmdd_full, pop, parameter, obstimes=0.1:0.1:tlast);
```

### Plot
```julia
plot(sim_tmdd_full, title = "Full model")
yaxis!(:log10)
xlabel!("Time (day)")
ylabel!("Free drug concentration (nM)")
```
If you want to plot only `LCONC`, select your column name of the simualted result.

```julia
plot(sim_tmdd_full, obsnames=[:LCONC], title = "Full model")
yaxis!(:log10)
xlabel!("Time (day)")
ylabel!("Free drug concentration (nM)")
```

## QSS model

The QSS model assumes that the binding rate is balanced by the sum of the
dissociation (`KOFF`) and internalization rates (`KINT`).

KSS = (KOFF + KINT)/KON

Total number of parameters reduced from 7 to 6 and
total number of compartments are reduced from 3 to 2.

Compartments are defined by total ligand (Ltot) amount,
total receptor (Rtot) concentration and
free ligand concentration (CONC) is calculated by Ltot, Rtot and other parameters.

### Model file

```julia
tmdd_qss = @model begin
    @param begin
        θ ∈ VectorDomain(7, lower=zeros(7), init=ones(7))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end
    @pre begin
        VC   = θ[1] * exp(η[1])
        KEL  = θ[2]
        KON  = θ[3]
        KOFF = θ[4]
        KSYN = θ[5]
        KDEG = θ[6]
        KINT = θ[7]
    end

    @init begin
        Rtot = KSYN/KDEG
    end

    @dynamics begin
        Ltot' = -KEL*CONC*VC - KINT*Rtot*CONC*VC/(KSS+CONC)         # Total Drug Amount
        Rtot' = KSYN - KDEG*Rtot - (KINT-KDEG)*CONC*Rtot/(KSS+CONC) # Total Receptor Concentration
    end

    @vars begin
        KSS = (KOFF+KINT)/KON
        CONC = 0.5*(Ltot/VC-Rtot-KSS)+0.5*sqrt((Ltot/VC-Rtot-KSS)^2+4*KSS*Ltot/VC)  # Free Drug Concentration
    end

    @derived begin
    end
end;
```

We can use KSS value directly, but in this example, `KSS` is derived by using
`KOFF`, `KINT` and `KON`.

### Setting up parameters
```julia
using Random
Random.seed!(123456)
sim_tmdd_qss = simobs(tmdd_qss, pop, parameter, obstimes=0.1:0.1:tlast);
```
### Plot
```julia
plot(sim_tmdd_qss, obsnames=[:CONC], title = "QSS model")
yaxis!(:log10)
xlabel!("Time (day)")
ylabel!("Free drug concentration (nM)")
```
## Example

This example is from [Li, H. et al, (2015)](https://doi.org/10.1002/prp2.98).

The purpose of this study was to predict human PK based on monkey PK
using two compartment disposition and Quasi-equlibrium approximation model.
Monkey PK parameters are scaled to human by allometric scaling.
We reproduced final simulated human PK profiles in figure 6(B) of the literature as below.
![Figure 6(B)](amg181.png)

The differences of model compared to our QSS example model are
- Periperal compartment
- Depot compartment for subcutaneous absorption
- Constant Rtot assumption (So called Wagner model), so there is no compartment for Rtot.
- The unit of concentratino as μg/mL.

For Wagner model, please refer to [Wagner model](http://mlxtran.lixoft.com/libraries/wagner-tmdd-model/).

We utilized parameter values in Table 3 of the literature.

### Model file
```julia
exmod = @model begin
    @param begin
        θ ∈ VectorDomain(6, lower=zeros(6), init=ones(6))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end

    @pre begin
        VC  = θ[1] * exp(η[1])
        CL = θ[2]
        KA  = θ[3]
        KD = θ[4]
        R0 = θ[5]
        KINT = θ[6]
        K12  = θ[7]
        K21  = θ[8]

    end

    @init begin
        FR = KSYN/KDEG
    end

    @vars begin
        LCONC = 0.5*( (LTOT/VC - R0 - KD) + sqrt((LTOT/VC - R0 - KD)^2 + 4*KD*LTOT/VC))
    end

    @dynamics begin
        DEPOT' =  -KA*DEPOT
        LTOT'  =   KA*DEPOT - KINT*LTOT - (CL/VC-KINT)*LCONC*VC - K12*LCONC*VC + K21*PERI
        PERI'  =   K12*LCONC*VC - K21*PERI
    end

    @derived begin
        LCONC_ug =  LCONC * 0.15
    end
end;
```
### Setting up parameters
```julia
θ_ex = [
      2.9,    # VC   Central volume (L)
      0.144,  # CL  Clearance (L/day)
      0.846,  # KA   Absorption rate constant (1/day)
      0.013,  # KD   Dissociation constant (nM)
      9.18,   # R0   Receptor concentraion (nM)
      0.0215, # KINT Internalization constant (1/day)
      0.276,  # K12  Dirstribution rate constant from central to peripheral (1/day)
      0.392   # K21  Dirstribution rate constant from peripheral to central (1/day)
      ]

parameter = (θ = θ_ex,
             Ω = PDMat(diagm(0 => [0.0001])),
             σ_prop = 0.01);
```
### Simulation design

```julia
dosemg1 = 7
dosemg2 = 21
dosemg3 = 70
dosemg4 = 210
dose1 = dosemg1*1e-3/150000*1e9
dose2 = dosemg2*1e-3/150000*1e9
dose3 = dosemg3*1e-3/150000*1e9
dose4 = dosemg4*1e-3/150000*1e9
tlast = 364

e1, e2, e3, e4 = DosageRegimen.([dose1, dose2, dose3, dose4], addl=2, ii=28)

pop1 = Population(map(i -> Subject(id=i,evs=e1),1:1))
pop2 = Population(map(i -> Subject(id=i,evs=e2),2:2))
pop3 = Population(map(i -> Subject(id=i,evs=e3),3:3))
pop4 = Population(map(i -> Subject(id=i,evs=e4),4:4))
pop = Population(vcat(pop1,pop2,pop3, pop4));
```

### Simulation
```julia
using Random
Random.seed!(123456)
sim_ex = simobs(exmod, pop, parameter, obstimes=0.1:0.1:tlast, tspan=(0.0,tlast));
```

### Plot
```julia
plot(sim_ex, obsnames=[:LCONC_ug], title = "")
yaxis!(:log10)
xticks!(0:28:tlast)
ylims!((0.0001, 1000))
xlabel!("Time (day)")
ylabel!("AMG 181 concentration (μg/mL)")
```
