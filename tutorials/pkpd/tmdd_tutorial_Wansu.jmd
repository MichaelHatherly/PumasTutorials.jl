---
title : TMDD model
author : Wansu Park
date:  Apr 14, 2019
---

```julia
using PuMaS, DataFrames, LinearAlgebra, Plots
```

# Introduction

The objectives of this tutorial is to implement a target-mediated drug dispostion
 (TMDD) model in PuMaS. TMDD...
 - Concept is introduced by Leby (1994)
 - Full model is indtroducd by Mager and Jusko (2001)
 - Many approximation by Gibiansky (2008), ...
 - Nice tutorial
     - CPTPSP 2015
     - [Monolix website] (http://mlxtran.lixoft.com/libraries/target-mediated-drug-disposition-tmdd-model-library/)

# Model

## Full Model

- One-compartment IV infusion Full TMDD model structure (figure)
- 7 Parameters : VC, KEL, KON, KOFF, KSYN, KDEG, KINT
- 3 Compartments : L (Ligand or Drug), R (Receptor or Target), P (Complex)
- Assumption of the model
    - The drug-target binding is a simple one-to-one binding process and
    occurs only in the centaral compartment
    - Recyling of the target does not occur in the elimination process of the
    drug-target complex
    - Target production and degradation rate are constand and do not depend on the
    drug  or target concentration
- Point to consider
    - All equations are in molar form with different molar weights
    - Dose and concentration sholud be converted to molar units


```julia
tmdd_full = @model begin
    @param begin
        θ ∈ VectorDomain(7, lower=zeros(7), init=ones(7))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end
    @pre begin
        VC   = θ[1] * exp(η[1])
        KEL  = θ[2]
        KON  = θ[3]
        KOFF = θ[4]
        KSYN = θ[5]
        KDEG = θ[6]
        KINT = θ[7]
    end

    @init begin
        R = KSYN/KDEG
    end

    @vars begin
        LCONC = L/VC                         # Free Drug Cocncentration (nM)
    end

    @dynamics begin
    L' = -KEL*L - KON*L*R + KOFF*P*VC         # Free Drug Amount
    R' = KSYN - KDEG*R - KON*L*R/VC + KOFF*P  # Free Receptor Concentration
    P' = KON*L*R/VC - KOFF*P - KINT*P         # Complex Cencentration
    end

    @derived begin
    end
end;
```
In this model, 7 parameters are defined in @pre.
Initial value of receptor compartment (R) is defined by KSYN/KDEG in @init.
L is defined by amount and R and P are defined by concentration.
Ligand concentration (LCONC) is defined by L/VC in @vars


## Setting up parameters
```julia
θ_full = [
      3,       # VC, Central volume (L)
      0.025,   # KEL, Elimination rate constant (1/day)
      10,      # KON, Associate rate (1/(nmol/L)/day)
      0.1,     # KOFF, Dissociatation rate (1/day)
      1,       # KSYN, Target synthesis rate (nmol/day)
      0.1,     # KDEG, Target degradation rate (1/day)
      0.2      # KINT, Internalization rate (1/day)
      ]

parameter = (θ = θ_full,
             Ω = PDMat(diagm(0 => [0.0001])),
             σ_prop = 0.01);
```
7 fixed effect parameter values are assigned in θ_full
In this model, we simulated using only population parameters.
?(How to fix random effect as 0?)

## Simulation design
```julia
nsub = 1
dosemg1 = 10    # mg
dosemg2 = 30    # mg
dosemg3 = 100   # mg
dose1 = dosemg1*1e-3/150000*1e9     # nmol
dose2 = dosemg2*1e-3/150000*1e9     # nmol
dose3 = dosemg3*1e-3/150000*1e9     # nmol
tlast = 96      # day

e1 = DosageRegimen(dose1)
e2 = DosageRegimen(dose2)
e3 = DosageRegimen(dose3)

pop1 = Population(map(i -> Subject(id=i,evs=e1),1:1))
pop2 = Population(map(i -> Subject(id=i,evs=e2),2:2))
pop3 = Population(map(i -> Subject(id=i,evs=e3),3:3))
pop = Population(vcat(pop1,pop2,pop3));
```

We simulated three dose (10, 30, 100 mg) and dose unit are converted into nmol.

?(Can I shorten this dosage regimen code?)

## Simulation
```julia
using Random
Random.seed!(123456)
sim_tmdd_full = simobs(tmdd_full, pop, parameter, obstimes=0.1:0.1:tlast);
```
## Plot
```julia
plot(sim_tmdd_full, title="")
yaxis!(:log10)
```

# QSS model

The QSS model assumes that the binding rate is balanced by the sum of the
dissociation and internalization rates.
KSS = (KOFF + KINT)/KON
Total number of parameters reduced from 7 to 6.

Total number of compartments are reduced from 3 to 2.
Compartments are defined by total drug (Ltot) and total receptor (Rtot)
and free drug concentration is calculated by Ltot, Rtot and other parameters



## Model

```julia
tmdd_qss = @model begin
    @param begin
        θ ∈ VectorDomain(7, lower=zeros(7), init=ones(7))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end
    @pre begin
        VC   = θ[1] * exp(η[1])
        KEL  = θ[2]
        KON  = θ[3]
        KOFF = θ[4]
        KSYN = θ[5]
        KDEG = θ[6]
        KINT = θ[7]
    end

    @init begin
        Rtot = KSYN/KDEG
    end

    @vars begin
        CONC = 0.5*(Ltot/VC-Rtot-(KINT+KOFF)/KON)+0.5*sqrt((Ltot/VC-Rtot-(KINT+KOFF)/KON)^2+4*(KINT+KOFF)/KON*Ltot/VC)  # Free Drug Concentration

        #KSS = (KOFF+KINT)/KON
        #CONC = 0.5*(Ltot/VC-Rtot-KSS)+0.5*sqrt((Ltot/VC-Rtot-KSS)^2+4*KSS*Ltot/VC)
    end

    @dynamics begin
        Ltot' = -KEL*CONC*VC - KINT*Rtot*CONC*VC/((KINT+KOFF)/KON+CONC)         # Total Drug Amount
        Rtot' = KSYN - KDEG*Rtot - (KINT-KDEG)*CONC*Rtot/((KINT+KOFF)/KON+CONC) # Total Receptor Concentration

        #Ltot' = -KEL*CONC*VC - KINT*Rtot*CONC*VC/(KSS+CONC)
        #Rtot' = KSYN - KDEG*Rtot - (KINT-KDEG)*CONC*Rtot/(KSS+CONC)
    end

    @derived begin
    end
end;
```

?(I defined KSS in @vars and used it in @dynamics, but some error when plotting)
We can use KSS value directly, but in this example, KSS is derived by full model parameters


## Setting up parameters
```julia
using Random
Random.seed!(123456)
sim_tmdd_qss = simobs(tmdd_qss, pop, parameter, obstimes=0.1:0.1:tlast);
```
## Plot
```julia
plot(sim_tmdd_qss, title="")
yaxis!(:log10)
```

# Example

This example is from
Li, H. et al, (2015).
Prediction of clinical pharmacokinetics of AMG 181, a human anti-α4β7
monoclonal antibody for treating inflammatory bowel diseases.
Pharmacology Research & Perspectives, 3(1), e00098.
https://doi.org/10.1002/prp2.98

The author used monkey PK data and modeled using two compartment disposition and
Quasi-equlibrium approximation model.
Then monkey PK parameters are scaled to human by allometric scaling.
We reproduced final simulated human PK profiles in figure 6(B).
4 subcutaneous and multiple doses (7, 21, 70 210 mg)

The difference of model compared to our example of QSS model
- One periperal compartment
- Depot compartment for SC absorption
- Constant Rtot assumption (So called Wagner model) so no differential eqaution for Rtot.
- The unit of concentratino as ug/mL.

We utilized parameter values in Table 3.

## Model
```julia
exmod = @model begin
    @param begin
        θ ∈ VectorDomain(6, lower=zeros(6), init=ones(6))
        Ω ∈ PSDDomain(1)
        σ_prop ∈ RealDomain(lower=0.0, init=0.01)
    end

    @random begin
    η ~ MvNormal(Ω)
    end

    @pre begin
        VC  = θ[1] * exp(η[1])
        CL = θ[2]
        KA  = θ[3]
        KD = θ[4]
        R0 = θ[5]
        KINT = θ[6]
        K12  = θ[7]
        K21  = θ[8]

    end

    @init begin
        FR = KSYN/KDEG
    end

    @vars begin
        LCONC = 0.5*( (LTOT/VC - R0 - KD) + sqrt((LTOT/VC - R0 - KD)^2 + 4*KD*LTOT/VC))
    end

    @dynamics begin
        DEPOT' =  -KA*DEPOT
        LTOT'  =   KA*DEPOT - KINT*LTOT - (CL/VC-KINT)*LCONC*VC - K12*LCONC*VC + K21*PERI
        PERI'  =   K12*LCONC*VC - K21*PERI
    end

    @derived begin
        LCONC_ug =  LCONC * 0.15
    end
end;
```
## Setting up parameters
```julia
θ_ex = [
      2.9,    # VC   Central volume (L)
      0.144,   # CL  Clearance (L/day)
      0.846,      # KA   Absorption rate constant (1/day)
      0.013,  # KD   Dissociation constant (nM)
      9.18,   # R0   Receptor concentraion (nM)
      0.0215, # KINT Internalization constant (1/day)
      0.276,  # K12  Dirstribution rate constant from central to peripheral (1/day)
      0.392   # K21  Dirstribution rate constant from peripheral to central (1/day)
      ]

parameter = (θ = θ_ex,
             Ω = PDMat(diagm(0 => [0.0001])),
             σ_prop = 0.01)

dosemg1 = 7
dosemg2 = 21
dosemg3 = 70
dosemg4 = 210
dose1 = dosemg1*1e-3/150000*1e9
dose2 = dosemg2*1e-3/150000*1e9
dose3 = dosemg3*1e-3/150000*1e9
dose4 = dosemg4*1e-3/150000*1e9
tlast = 364

e1 = DosageRegimen(dose1, addl=2, ii=28)
e2 = DosageRegimen(dose2, addl=2, ii=28)
e3 = DosageRegimen(dose3, addl=2, ii=28)
e4 = DosageRegimen(dose4, addl=2, ii=28)

pop1 = Population(map(i -> Subject(id=i,evs=e1),1:1))
pop2 = Population(map(i -> Subject(id=i,evs=e2),2:2))
pop3 = Population(map(i -> Subject(id=i,evs=e3),3:3))
pop4 = Population(map(i -> Subject(id=i,evs=e4),4:4))
pop = Population(vcat(pop1,pop2,pop3, pop4))

using Random
Random.seed!(123456)
sim_ex = simobs(exmod, pop, parameter, obstimes=0.1:0.1:tlast, tspan=(0.0,tlast), parallel_type=PuMaS.Serial);
```

## Plot
```julia
plot(sim_ex, title="")
yaxis!(:log10)
```

?(I don't know how to select only one figure for concentration unit as ug/ml)
