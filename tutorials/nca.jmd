---
title: NCA Tutorial
author: Yingbo Ma
date: 30nd November 2018
---

# Introduction

This is an introduction to `NCA.jl`, a software for noncompartmental analysis (NCA).
In this tutorial we will show how to use `NCA.jl` to analysis data.

## Installation

Currently, `NCA.jl` is a submodule in `PuMaS.jl`, so you only need to install
`PuMaS.jl`, and everything will be ready to go.

## Getting Started

To load the package, use

```julia
using PuMaS.NCA
```

First, let's load the example NCA data inside `PuMaS.jl`. This data have $24$
individuals, and each of them has $16$ data points. Here, we are creating two
functions `concs(i)` and `times(i)` which give the concentration timeseries of
individual `i`.

```julia
using PuMaS, CSV

const example_nca_data = CSV.read(example_nmtran_data("nca_test_data/dapa_IV"))
concs(i) = Float64.(example_nca_data[:CObs])[16(i-1)+1:16*i]
times(i) = Float64.(example_nca_data[:TIME])[16(i-1)+1:16*i]
```

# Efficient Computation of Multiple NCA Diagnostics

## AUC and AUMC

We can compute the area under the curve (AUC) from the first observation time
to infinity

```julia
auc(concs(1), times(1))
```
```julia
auc(concs(1), times(1), method=:linuplogdown)
```

the keyword argument `method` can be `:linear`, `:linuplogdown`, or `:linlog`,
and it defaults to `:linear`. This is a simple interface, however it is not
efficient if you want to compute many quantities. The recommended way is to
create an `NCAdata` object first and then call the respective NCA diagnostic on
the data object:

```julia
nca = NCAdata(concs(1), times(1))
auc(nca)
```

Let's create `NCAData(concs(i),times(i))` for each individual `i` from $1$ to
$24$. To do that, we would broadcast the whole expression over the individual
indices we'd want to use, like:

```julia
ncas = @. NCAdata(concs(1:24), times(1:24));
```

`AUClast` is the area under the curve from the first observation to the last
observation. To compute `AUClast` on the first individual, one would do:

```julia
ncas = @. NCAdata(concs(1:24), times(1:24), dose=5000.)
auc(ncas[1], auctype=:AUClast)
```

Note that if `dose` is provided, `auc` will return a tuple, which is in the
form of $(\text{AUC}, \text{normalized AUC})$.

Or to compute the AUC on every individual, once would do:

```julia
@. auc(ncas, auctype=:AUClast)
```

One can also compute AUC on a certain interval. To compute AUC on the interval
$[10, \infty]$

```julia
auc(ncas[1], interval=(10,Inf))
```

In many cases, the AUC commands may need to extrapolate in order to cover the
desired interval. To see the percentage of extrapolation
($\frac{\text{extrapolated AUC}}{\text{Total AUC}}\cdot 100$), you can use
the command:

```julia
auc_extrap_percent(ncas[1])
```

Area under the first moment of the concentration (AUMC) is

$\int_{t_0}^{t_1} t\cdot\text{concentration}(t) dt.$

The interface of computing AUMC is exactly the same with AUC, and one needs to
change `auc` to `aumc` for calculating AUMC or related quantities. For instance

```julia
aumc(ncas[1])
aumc_extrap_percent(ncas[1])
```

## Terminal Rate Constant ($\Lambda Z$)

The negative of the concentration vs. time slope in log-lin scale is often
referred to as $\Lambda Z$ or terminal rate constant. To compute $\Lambda Z$,
one can issue

```julia
lambdaz(ncas[1])
```

`lambdaz` returns a tuple in the form of $(\Lambda Z, \text{the number of data
points used}, r^2)$. By default, it checks last $10$ or less data points, one
can change it by providing the keyword `threshold`, e.g.

```julia
lambdaz(ncas[1], threshold=15)
```

One can also specify the exact data points by passing their indices

```julia
lambdaz(ncas[1], idx=[10, 15, 16])
```

## Simple functions

`T_max` is the time point at which the maximum concentration (`C_max`) is
observed, and they can be computed by:

```julia
tmax(ncas[1])
cmax(ncas[1])
cmax(ncas[1], interval=(20, 24))
```

note that `cmax` returns `C_max` and normalized `C_max` if `dose` is provided.


`T_last` is the time of the last observed concentration value above the lower
limit of quantization (LOQ), and the corresponding concentration value is
(`C_last`). They can be computed by the command

```julia
tlast(ncas[1])
clast(ncas[1])
```

The half-time can be computed by:

```julia
thalf(ncas[1])
```

One may need to interpolate or to extrapolate the concentration-time data. It
can be done by:

```julia
NCA.interpextrapconc(ncas[1], 12., interpmethod=:linear)
```

`interperpmethod` can be `:linear`, `:linuplogdown`, or `:linlog`.
