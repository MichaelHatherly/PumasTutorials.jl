---
title: NCA Tutorial
author: Yingbo Ma
date: 30nd November 2018
---

# Introduction

This is an introduction to `NCA.jl`, a software for noncompartmental analysis (NCA).
In this tutorial we will show how to use `NCA.jl` to analysis data.

## Installation

Currently, `NCA.jl` is a submodule in `PuMaS.jl`, so you only need to install
`PuMaS.jl`, and everything will be ready to go.

## Getting Started

To load the package, use

```julia
using PuMaS.NCA
```

## Example

First, let's load the example NCA data inside `PuMaS.jl`.

```julia
using PuMaS, CSV

root = joinpath(dirname(pathof(PuMaS)), "..")
const example_nca_data = CSV.read("$root/examples/nca_test_data/dapa_IV.csv")
concs(i) = Float64.(example_nca_data[:CObs])[16(i-1)+1:16*i]
times(i) = Float64.(example_nca_data[:TIME])[16(i-1)+1:16*i]
```

### AUC and AUMC

We can compute the area under the curve (AUC) from the first observation time
to infinity

```julia
auc(concs(1), times(1))
auc(concs(1), times(1), method=:linuplogdown)
```

the keyword argument `method` can be `:linear`, `:linuplogdown`, or `:linlog`,
and it defaults to `:linear`. This is a simple interface, however it is not
efficient if you want to compute many quantities. The recommended way is to
create an `NCAdata` object first

```julia
nca = NCAdata(concs(1), times(1))
auc(nca)
```

to create many `NCAdata` object at once, one can use Julia's broadcasting
machinery

```julia
ncas = @. NCAdata(concs(1:24), times(1:24));
```

To compute `AUClast`, one can do

```julia
ncas = @. NCAdata(concs(1:24), times(1:24), dose=5000.)
auc(ncas[1], auctype=:AUClast)
```

Note that if `dose` is provided, `auc` will return a tuple, which is in the
form of $(\text{AUC}, \text{normalized AUC})$.

To compute `AUClast` for every subject. Again, it is done by Julia's
broadcasting machinery.

```julia
@. auc(ncas, auctype=:AUClast)
```

One can also compute AUC on a certain interval. To compute AUC on the interval
$[10, \infty]$

```julia
auc(ncas[1], interval=(10,Inf))
```

One can get extrapolation percentage by

```julia
auc_extrap_percent(ncas[1])
```

The interface of computing area under the first moment of the concentration
(AUMC) is exactly the same with AUC, and one needs to change `auc` to `aumc`
for calculating AUMC or related quantities. For instance

```julia
aumc(ncas[1])
aumc_extrap_percent(ncas[1])
```

### $\lambda z$

To compute $\lambda z$, one can issue

```julia
lambdaz(ncas[1])
```

`lambdaz` returns a tuple in the form of $(\lambda z, \text{the number of data
points used}, r^2)$. By default, it checks last $10$ or less data points, one
can change it by providing the keyword `threshold`, e.g.

```julia
lambdaz(ncas[1], threshold=15)
```

One can also specify the exact data points by passing their indices

```julia
lambdaz(ncas[1], idx=[10, 15, 16])
```

### Simple functions

`T_max` and `C_max`:

```julia
tmax(ncas[1])
cmax(ncas[1])
cmax(ncas[1], interval=(20, 24))
```

note that `cmax` returns `C_max` and normalized `C_max` if `dose` is provided.


`T_last` and `C_last`:

```julia
tlast(ncas[1])
clast(ncas[1])
```

`T_half`:

```julia
thalf(ncas[1])
```

Interpolation/extrapolation:

```julia
NCA.interpextrapconc(ncas[1], 12., interpmethod=:linear)
```

`interperpmethod` can be `:linear`, `:linuplogdown`, or `:linlog`.
