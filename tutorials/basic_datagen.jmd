---
title : Data Generation in PuMaS
author : Vijay Ivaturi
date:  February 10, 2019
---


```julia
using Weave
using PuMaS
using DataFrames
using LinearAlgebra
using Plots
```
# Introduction

In this tutorial, we will cover the fundamentals of data generation using PuMaS. This is high level introduction that will
demonstrate the basic workflow from specifying a model, generating a subject or population and simulating from the model into the population.

# A simple example

## The model

Below is a PuMaS model that specifies a 1-compartment oral absorption system with between-subject
variability on all the parameters. Details of the model specification are provided in a different
tutorial.

```julia
mdsl = @model begin
  @param begin
    θ ∈ VectorDomain(4)
    Ω ∈ PSDDomain(3)
    σ_prop ∈ RealDomain(init=0.1)
  end

  @random begin
    η ~ MvNormal(Ω)
  end

  @covariates isPM Wt


  @pre begin
    TVCL = isPM == 1 ? θ[1] : θ[4]
    CL = θ[1]*(Wt/70)^0.75*exp(η[1])
    V = θ[2]*(Wt/70)^0.75*exp(η[2])
    Ka = θ[3]*exp(η[3])
  end

  @dynamics begin
    Depot' = -Ka*Depot
    Central' = Ka*Depot - Central*CL/V
  end

  @vars begin
  conc = Central/V
  end

# Note that ustrip function is used below until a fix is provided in Distributions.jl
  @derived begin
    dv ~ @.Normal(conc,sqrt(conc^2*σ_prop+ eps()))
  end

end
```
## Setting up parameters
Next we provide the initial estimates of the parameters to simulate from. The fixed effects are provided
in the θ vector (CL, V, Ka) and the between-subject variability parameteres are provided in the Ω vector as
variances. So, 0.04 variance on Ω_11 suggests a 20% coefficient of variation. Similarly, σ_prop has a 20%
proportional residual error.

```julia
parms = (
θ = [0.4,20,1.1,2],
Ω = PDMat(diagm(0 => [0.04,0.04,0.04])),
σ_prop = 0.04
)
```

## Simulation dataset
`DosageRegimen()` is the function that lets you create a dosing regimen.  The first argument of the `DosageRegimen`
is `amt` and is not a named argument. All subsequent arguments need to be named. Lets try
a simple example where you provide a 100 mg dose.

```julia
ev = DosageRegimen(100, time=0)
first(ev.data)
```
As you can see above, we provided a single 100 mg dose. `DosageRegimen` provides some defaults when
it creates the dataset, `time=0`, `evid=1`, `cmt=1`, `rate=0`, `ii=0` & `addl=0`. We can also provide
units to the `amt` and any other variable that is derived from `amt`, e.g. `rate`, will have associated units.
Handling of units will be covered in a different tutorial.

Note that `ev` is of type `DosageRegimen`. Specified like above,
`DosageRegimen` is one of the four fundamental building block of a `Subject` (more on `Subject` below).

### Single subject

Let's create a single subject

```julia
s1 = Subject(id=1,evs=ev,cvs=(isPM=0, Wt=70))
for fn in fieldnames(Subject)
           x = getproperty(s1, fn)
           if !isa(x, Nothing)
               println(fn)
               println(x)
           end
end
```
Note that each `Subject` is an individual composed of:

  - `id`: an unique identifier
  - `obs`: observations, represented by `PuMaS.Observation[]`
  - `cvs`: covariates
  - `evs`: events, represented by `PuMaS.Event[]`

In the example above, we only provided the `id`, `evs`, and the `cvs`. Since  `obs` were not
provided, they are represented by an empty array. Lets take a closer at the events for this
subject 1.

```julia
s1.events
```
The events are presented by basic information such as the dose of drug and associated units if specified, the time of dose administration,
the compartment number for administration and whether the dose is an instantaneous input or an infusion.

Below is how the covariates are represented

```julia
s1.covariates
```
Covariates will be discussed in detail later.

Using this one subject, `s1`, let us simulate a simple concentration time profile using the model above.

```julia
obs = simobs(mdsl,s1,parms,obstimes=0:0.1:120)
```

`simobs` is the fundamental simulation function, the details of which are discussed in a different tutorial. The two arguments of
`simobs` relevant to this tutorial are `data` and `obstimes`. `data` can either be a `Subject` or a `Population`. In this example, we
are dealing with a single subject `s1`. `obstimes` is the way we specify to the simulator the times at which the simulation output should
be stored and output. `obstimes` is specified as a range here, from 0 to 120 hours every 0.1 hours.

```julia
gr()
plot(collect(obs.times),obs.derived[:conc], yaxis="Concentration (mg/L)", xaxis="Time (hrs)", color=2,thickness_scaling=1.5, legend=false)
```

### A Population

Now, lets create one more subject, `s2`.

```julia
s2 = Subject(id=2,evs=ev,cvs=(isPM=1,Wt=70))
```

If we want to simulate both `s1` and `s2` together, we need to bring these subjects together to form a `Population`. A `Population` is
essentially a collection of subjects.

```julia
twosubjs =  Population([s1,s2])
```

Let's see the details of the first and the second subject

```julia
twosubjs.subjects[1]
```

```julia
twosubjs.subjects[2]
```
Now, we can simulate this `Population` of 2 subjects as below

```julia
obs = simobs(mdsl,twosubjs,parms,obstimes=0:0.1:120)
```

```julia
ps1 = plot(collect(obs[1].times),obs[1].derived[:conc], yaxis="Concentration (mg/L)", xaxis="Time (hrs)", color=2,thickness_scaling=1.0, legend=false)
ps2  = plot(collect(obs[2].times),obs[2].derived[:conc], yaxis="Concentration (mg/L)", xaxis="Time (hrs)", color=2,thickness_scaling=1.0, legend=false)
plot(ps1,ps2, layout=(2,1))
```

Similarly, we can build a population of any number of subjects. But before we do that, let's dive into covariate generation.

### Covariates

As was discussed earlier, a `Subject` can also be provided details regarding covariates. In the model above, there are two covariates,
`isPM` which stands for _is the subject a poor metabolizer_ and takes a boolean of _yes_ and  _no_. The second covariate is a
a continuos covariate where body weight `Wt` impacts both `CL` and `V`. Let us now specify covariates to a population of 10 subjects.

```julia
choose_covariates() = (isPM = rand([1, 0]),
                    Wt = rand(55:80))
```
`choose_covariates` will randomly choose a `isPM` and an `Wt` between 55-80 kgs

We can make a list with covariates for ten subjects through a list comprehension

```julia
cvs = [ choose_covariates() for i in 1:10 ]
DataFrame(cvs)
```

Now, we add these covariates to the population as below


```julia
pop_with_covariates = Population(map(i -> Subject(id=i,evs=ev,cvs=choose_covariates()),1:10))
```

Simulate into the population

```julia
obs = simobs(mdsl,pop_with_covariates,parms,obstimes=0:0.1:120)
```

and visualize the output

```julia
plot(collect(obs[1].times),obs[1].derived[:conc], yaxis="Concentration (mg/L)", xaxis="Time (hrs)", color=2,thickness_scaling=1.5, legend=false)
for i in 2:10
  plot!(obs[i].times,obs[i][:conc])
end
#savefig("./tutorials/plotwithcovs.jpg")
```
![]("./plotwithcovs.jpg")
